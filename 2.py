# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# Key learning - make an exit case for infinite loops lol


def main(upTo):
	# find list of fibb sequence using dynamic solutions
	# lazy observation, every 3rd item is even. proof is odd+odd = even, and if we start with odd and an even (the number 0) the order is evident.

	# time complexity is O(n), where n is number of fibb numbers less than upTo. I'm guessing that n = log(upTo) or n = 1/log(upTo), but who knows.

	fibbNumbers = []
	fibbNumbers.append(0)
	fibbNumbers.append(1)
	k = 2
	kFibb = 1
	while kFibb<upTo:
		kFibb = fibbNumbers[k-1] + fibbNumbers[k-2]
		fibbNumbers.append(kFibb)
		k += 1

	print(sum(fibbNumbers[0::3]))


if __name__ == '__main__':
	main(4000000)